[{"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\index.js":"1","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\App.jsx":"2","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\index.js":"3","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\ChannelContainer.jsx":"4","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\ChannelListContainer.jsx":"5","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\ChannelSearch.jsx":"6","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\index.js":"7","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\ChannelInfo.js":"8","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\CloseCreateChannel.js":"9","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\InviteIcon.js":"10","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\SearchIcon.js":"11","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\LightningBolt.js":"12","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\AddChannel.js":"13","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\TeamChannelList.jsx":"14","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\TeamChannelPreview.jsx":"15","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\Auth.jsx":"16","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\TeamMessage.jsx":"17","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\ChannelInner.jsx":"18","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\EditChannel.jsx":"19","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\CreateChannel.jsx":"20","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\UserList.jsx":"21"},{"size":154,"mtime":1639180180697,"results":"22","hashOfConfig":"23"},{"size":1683,"mtime":1639274964307,"results":"24","hashOfConfig":"23"},{"size":658,"mtime":1639273779219,"results":"25","hashOfConfig":"23"},{"size":1427,"mtime":1639270885684,"results":"26","hashOfConfig":"23"},{"size":3430,"mtime":1639272504878,"results":"27","hashOfConfig":"23"},{"size":1232,"mtime":1639182451338,"results":"28","hashOfConfig":"23"},{"size":286,"mtime":1639173393466,"results":"29","hashOfConfig":"23"},{"size":766,"mtime":1639173332134,"results":"30","hashOfConfig":"23"},{"size":844,"mtime":1639173357415,"results":"31","hashOfConfig":"23"},{"size":1103,"mtime":1639173409545,"results":"32","hashOfConfig":"23"},{"size":479,"mtime":1639173450335,"results":"33","hashOfConfig":"23"},{"size":532,"mtime":1639173430015,"results":"34","hashOfConfig":"23"},{"size":723,"mtime":1639173304927,"results":"35","hashOfConfig":"23"},{"size":1498,"mtime":1639272069273,"results":"36","hashOfConfig":"23"},{"size":1292,"mtime":1639257628843,"results":"37","hashOfConfig":"23"},{"size":6603,"mtime":1639267569760,"results":"38","hashOfConfig":"23"},{"size":164,"mtime":1639270742427,"results":"39","hashOfConfig":"23"},{"size":3202,"mtime":1639270212647,"results":"40","hashOfConfig":"23"},{"size":169,"mtime":1639271116684,"results":"41","hashOfConfig":"23"},{"size":1304,"mtime":1639364723018,"results":"42","hashOfConfig":"23"},{"size":2451,"mtime":1639337080962,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"xbdldn",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\index.js",[],["92","93"],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\App.jsx",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\index.js",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\ChannelContainer.jsx",["94"],"import React from 'react';\r\nimport {Channel, useChatContext, MessageTeam} from 'stream-chat-react';\r\n\r\nimport {ChannelInner, CreateChannel, EditChannel } from './';\r\n\r\nconst ChannelContainer = ({isCreating, setIsCreating, isEditing, setIsEditing, createType}) => {\r\n    const { channel } = useChatContext();\r\n\r\n    if(isCreating) {\r\n        return (\r\n            <div className='channel__container'>\r\n                <CreateChannel createType={createType} setIsCreating={setIsCreating}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if(isEditing){\r\n        return (\r\n            <div className='channel__container'>\r\n                <EditChannel setIsEditing={isEditing}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const EmptyState = () => {\r\n        return(\r\n        <div className='channel-empty__container'>\r\n            <p className='channel-empty__first'> This is the beginning of your chat history</p>\r\n            <p className='channel-empty__second'> Send text, attachments, links, and more! </p>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='channel__container'>\r\n            <Channel\r\n                EmptyStateIndicator={EmptyState}\r\n                Message={(messageProps, i) => <MessageTeam key={i} {...messageProps}/>}\r\n            >\r\n                <ChannelInner setIsEditing={setIsEditing}/>\r\n            </Channel>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelContainer\r\n","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\ChannelListContainer.jsx",["95"],"import React from 'react';\r\nimport { ChannelList, useChatContext } from 'stream-chat-react';\r\nimport Cookies from 'universal-cookie';\r\nimport {ChannelSearch, TeamChannelList, TeamChannelPreview} from './';\r\n\r\nimport HospitalIcon from '../assets/hospital.png';\r\nimport LogoutIcon from '../assets/logout.png';\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst SideBar = ({logout}) => (\r\n    <div className=\"channel-list__sidebar\">\r\n        <div className='channel-list__sidebar__icon1'>\r\n            <div className='icon1__inner'>\r\n                <img src={HospitalIcon} alt='Hospital' width='30'/>\r\n            </div>\r\n        </div>\r\n        <div className='channel-list__sidebar__icon2'>\r\n            <div className='icon1__inner'>\r\n                <img src={LogoutIcon} alt='Logout' width='30'/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst CompanyHeader = () => (\r\n    <div className='channel-list__header'>\r\n        <p className='channel-list__header__text'>Chatter</p>\r\n    </div>\r\n)\r\n\r\nconst ChannelListContainer = ({isCreating, setIsCreating, setIsEditing, setCreateType}) => {\r\n    \r\nconst logout = () => {\r\n        cookies.remove('token');\r\n        cookies.remove('userId');\r\n        cookies.remove('username');\r\n        cookies.remove('fullName');\r\n        cookies.remove('avatarURL');\r\n        cookies.remove('hashedPassword');\r\n        cookies.remove('email');\r\n\r\n        window.location.reload();\r\n}\r\n    \r\n    return (\r\n\r\n        <>\r\n            <SideBar logout={logout}/>\r\n            <div className='channel-list__list__wrapper'>\r\n                <CompanyHeader />\r\n                <ChannelSearch />\r\n                <ChannelList \r\n                    filters={{}}\r\n                    channelRenderFilterFn={() => {}}\r\n                    List={(listProps) => (\r\n                        <TeamChannelList\r\n                            {...listProps}\r\n                            type='team'\r\n                            isCreating={isCreating}\r\n                            setIsCreating={setIsCreating}\r\n                            setCreateType={setCreateType}\r\n                            setIsEditing={setIsEditing}\r\n                            \r\n\r\n                        />\r\n                    )}\r\n                    Preview={(previewProps) => (\r\n                        <TeamChannelPreview\r\n                            {...previewProps}\r\n                            type='team'\r\n                            \r\n                        />\r\n                    )}\r\n                />\r\n                <ChannelList \r\n                    filters={{}}\r\n                    channelRenderFilterFn={() => {}}\r\n                    List={(listProps) => (\r\n                        <TeamChannelList\r\n                            {...listProps}\r\n                            type='messaging'\r\n                            isCreating={isCreating}\r\n                            setIsCreating={setIsCreating}\r\n                            setCreateType={setCreateType}\r\n                            setIsEditing={setIsEditing}\r\n                        />\r\n                    )}\r\n                    Preview={(previewProps) => (\r\n                        <TeamChannelPreview\r\n                            {...previewProps}\r\n                            type='messaging'\r\n                        />\r\n                    )}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChannelListContainer\r\n","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\ChannelSearch.jsx",["96","97","98"],"import React, {useState, useEffect} from 'react';\r\nimport {useChatContent} from 'stream-chat-react';\r\n\r\nimport {SearchIcon} from '../assets';\r\n\r\n\r\n\r\n\r\nconst ChannelSearch = () => {\r\n    const [query, setQuery] = useState('');\r\n    const [loading, setLoading] = useState('false');\r\n    \r\n    const getChannels = async (text) => {\r\n        try {\r\n            // TODO: FETCH CHANNELS\r\n        } catch (error) {\r\n            setQuery('')\r\n        }\r\n    }\r\n\r\n    const onSearch = (event) => {\r\n        event.preventDefault();\r\n\r\n        setLoading(true);\r\n        setQuery(event.target.value);\r\n        getChannels(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className='channel-search__container'>\r\n            <div className='channel-search__input__wrapper'>\r\n                <div className='channel-search__input__icon'>\r\n                    <SearchIcon />\r\n                </div>\r\n                <input \r\n                    className='channel-search__input__text' \r\n                    placeholder='Search'\r\n                    type='text' \r\n                    value={query} \r\n                    onChange={onSearch}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelSearch\r\n","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\index.js",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\ChannelInfo.js",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\CloseCreateChannel.js",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\InviteIcon.js",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\SearchIcon.js",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\LightningBolt.js",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\assets\\AddChannel.js",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\TeamChannelList.jsx",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\TeamChannelPreview.jsx",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\Auth.jsx",["99"],"import React , {useState} from 'react';\r\nimport Cookies from 'universal-cookie';\r\nimport axios from 'axios';\r\n\r\nimport signinImage from '../assets/signup.jpg';\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst initialState = {\r\n    username: \"\",\r\n    fullName: \"\",\r\n    email: \"\",\r\n    avatarURL: \"\",\r\n    password: \"\",\r\n    confirmPassword:\"\",\r\n\r\n}\r\n\r\nconst Auth = () => {\r\n    const [form, setForm] = useState(initialState);\r\n    const [isSignup, setIsSignup] = useState(false);\r\n\r\n\r\n    //takes user inputs and creates a form\r\n    const handleChange = (e) => {\r\n        setForm({...form, [e.target.name]: e.target.value})\r\n\r\n    }\r\n\r\n\r\n    //submits form then sends to backend\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const {username, fullName, password, email, avatarURL} = form;\r\n\r\n        const URL = 'http://localhost:5000/auth';\r\n\r\n        const {data: {token, userId, hashedPassword }} = await axios.post(`${URL}/${isSignup ? 'signup' : 'login'}`, {\r\n            username, password, fullName, email, avatarURL,\r\n        });\r\n        \r\n        cookies.set('token', token);\r\n        cookies.set('username', username);\r\n        cookies.set('fullName', fullName);\r\n        cookies.set('userId', userId)\r\n        \r\n        if(isSignup) {\r\n            cookies.set('email', email);\r\n            cookies.set('avatarURL', avatarURL);\r\n            cookies.set('hashedPassword', hashedPassword)   \r\n        }\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n\r\n    //switches from sign up to sign in vice versa\r\n    const switchMode = () => {\r\n        setIsSignup((prevIsSignup) => !prevIsSignup);\r\n    }\r\n\r\n    return (\r\n        <div className='auth__form-container'>\r\n            <div className='auth__form-container_fields'>\r\n                <div className='auth__form-container_fields-content'>\r\n                    <p>{isSignup ? 'Sign Up' : 'Sign In'}</p>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className='auth__form-container_fields-content_input'>\r\n                            <label htmlFor='username'>Username</label>\r\n                                <input\r\n                                    name='username'\r\n                                    type='text'\r\n                                    placeholder=''\r\n                                    onChange={handleChange}\r\n                                    required />\r\n                        </div>\r\n                        {isSignup && (\r\n                            <>\r\n                                <div className='auth__form-container_fields-content_input'>\r\n                                        <label htmlFor='FullName'>Full Name</label>\r\n                                        <input\r\n                                            name='fullName'\r\n                                            type='text'\r\n                                            placeholder=''\r\n                                            onChange={handleChange}\r\n                                            required />\r\n                                </div>\r\n                            </> \r\n                            )}                        \r\n                        {isSignup && (\r\n                            <>\r\n                            <div className='auth__form-container_fields-content_input'>\r\n                                    <label htmlFor='email'>Email</label>\r\n                                    <input\r\n                                        name='email'\r\n                                        type='text'\r\n                                        placeholder=''\r\n                                        onChange={handleChange}\r\n                                        required />\r\n                            </div>\r\n                            </> \r\n                        )} \r\n\r\n                        {isSignup && (\r\n                            <>\r\n                            <div className='auth__form-container_fields-content_input'>\r\n                                    <label htmlFor='avatarURL'>Avatar URL</label>\r\n                                    <input\r\n                                        name='avatarURL'\r\n                                        type='text'\r\n                                        placeholder=''\r\n                                        onChange={handleChange}\r\n                                     />\r\n                            </div>\r\n                            </> \r\n                        )}       \r\n                        <div className='auth__form-container_fields-content_input'>\r\n                            <label htmlFor='password'>Password</label>\r\n                                <input\r\n                                    name='password'\r\n                                    type='password'\r\n                                    placeholder=''\r\n                                    onChange={handleChange}\r\n                                    required />\r\n                        </div>\r\n                        {isSignup && (\r\n                            <>\r\n                                <div className='auth__form-container_fields-content_input'>\r\n                                        <label htmlFor='confirmPassword'>Confirm Password</label>\r\n                                        <input\r\n                                            name='confirmPassword'\r\n                                            type='password'\r\n                                            placeholder=''\r\n                                            onChange={handleChange}\r\n                                            required />\r\n                                </div>\r\n                            </> \r\n                            )}\r\n                            <div className='auth__form-container_fields-content_button'>\r\n                                <button>{isSignup ? \"Sign Up\" : \"Sign In\"}</button>\r\n                            </div>\r\n                    </form>\r\n                    <div className='auth__form-container_fields-account'>\r\n                        <p>\r\n                            {isSignup\r\n                            ? \"Already have an account?\"\r\n                            : \"Don't have an account?\"\r\n                            }\r\n                            &nbsp;\r\n                            <span onClick={switchMode}> \r\n                                {isSignup ? 'Sign in' : 'Sign Up'}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n","C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\TeamMessage.jsx",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\ChannelInner.jsx",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\EditChannel.jsx",[],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\CreateChannel.jsx",["100","101","102"],"C:\\Users\\Nickiti\\Desktop\\chat-app\\client\\src\\components\\UserList.jsx",["103","104","105"],"import React, {useState,useEffect} from \"react\";\r\nimport { Avatar, useChatContext } from \"stream-chat-react\";\r\nimport { List } from \"stream-chat-react/dist/components/AutoCompleteTextarea/List\";\r\n\r\nimport { InviteIcon } from \"../assets\";\r\n\r\nconst ListContainer = ({children}) => {\r\n    return (\r\n        <div className=\"user-list__container\">\r\n            <div className=\"user-list__header\">\r\n                <p>User</p>\r\n                <p>Invite</p>\r\n            </div>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst UserItem = ({ user }) => {\r\n\r\n    const [selected, setSelected] = useState(false)\r\n    \r\n    const handleSelect = () => {\r\n        setSelected((prevSelected)=>!prevSelected);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"user-item__wrapper\" onClick={handleSelect}>\r\n            <div className=\"user-item__name-wrapper\">\r\n                <Avatar image={user.image} name={user.name || user.id} size={32} />\r\n                <p className=\"user-item__name\">{user.name || user.id}</p>\r\n            </div>\r\n            {selected ? <InviteIcon /> : <div className=\"user-item__invite-empty\"/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst UserList = () => {\r\n    const { client } = useChatContext();\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [listEmpty, setlistEmpty] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const getUsers = async () => {\r\n            if(loading) return;\r\n\r\n            setLoading(true)\r\n\r\n            try {\r\n                const response = await client.queryUsers(\r\n                    {id: {$ne: client.userID}},\r\n                    {id: 1},\r\n                    {limit: 8}\r\n                );\r\n                \r\n                if(response.users.length) {\r\n                    setUsers(response.users)\r\n                } else {\r\n                    setlistEmpty(true)\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n            setLoading(false)\r\n        }\r\n        if(client) getUsers()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <ListContainer>\r\n            {loading ? <div className=\"user-list__message\">\r\n                Loading users...\r\n            </div> : (\r\n                users?.map((user, i) => (\r\n                    <UserItem index={i} key={user.id} user={user} />\r\n                ))\r\n            )}\r\n        </ListContainer>\r\n    )\r\n}\r\n\r\nexport default UserList;",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":7,"column":13,"nodeType":"112","messageId":"113","endLine":7,"endColumn":20},{"ruleId":"110","severity":1,"message":"114","line":2,"column":23,"nodeType":"112","messageId":"113","endLine":2,"endColumn":37},{"ruleId":"110","severity":1,"message":"115","line":1,"column":26,"nodeType":"112","messageId":"113","endLine":1,"endColumn":35},{"ruleId":"110","severity":1,"message":"116","line":2,"column":9,"nodeType":"112","messageId":"113","endLine":2,"endColumn":23},{"ruleId":"110","severity":1,"message":"117","line":11,"column":12,"nodeType":"112","messageId":"113","endLine":11,"endColumn":19},{"ruleId":"110","severity":1,"message":"118","line":5,"column":8,"nodeType":"112","messageId":"113","endLine":5,"endColumn":19},{"ruleId":"110","severity":1,"message":"114","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":24},{"ruleId":"110","severity":1,"message":"119","line":8,"column":12,"nodeType":"112","messageId":"113","endLine":8,"endColumn":25},{"ruleId":"110","severity":1,"message":"120","line":8,"column":27,"nodeType":"112","messageId":"113","endLine":8,"endColumn":43},{"ruleId":"110","severity":1,"message":"121","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":14},{"ruleId":"110","severity":1,"message":"122","line":43,"column":12,"nodeType":"112","messageId":"113","endLine":43,"endColumn":21},{"ruleId":"123","severity":1,"message":"124","line":70,"column":8,"nodeType":"125","endLine":70,"endColumn":10,"suggestions":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'channel' is assigned a value but never used.","Identifier","unusedVar","'useChatContext' is defined but never used.","'useEffect' is defined but never used.","'useChatContent' is defined but never used.","'loading' is assigned a value but never used.","'signinImage' is defined but never used.","'selectedUsers' is assigned a value but never used.","'setSelectedUsers' is assigned a value but never used.","'List' is defined but never used.","'listEmpty' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client' and 'loading'. Either include them or remove the dependency array.","ArrayExpression",["129"],"no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},"Update the dependencies array to be: [client, loading]",{"range":"132","text":"133"},[2073,2075],"[client, loading]"]